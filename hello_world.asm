# x86-Assembly-HelloWorld
Assembly practice for Offensive Sec Expert Cert


 hello_world.asm                                                                                                                                                                                                                            
; Author: Kenneth Cole                                                                                                                                                                                                                       
; Date 04-Apr-2021                                                                                                                                                                                                                           
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                             
global _start                                                                                                                                                                                                                                
                                                                                                                                                                                                                                             
                    ;Now to setup and define the sections neccesssary for this assembly program to run                                                                                                                                       
                                                                                                                                                                                                                                             
                    ;Syntax is ``` section .whatever ````  section you want                                                                                                                                                                  
                    ;The .text section specifies that this is the section containing all the code that you want to run and actually have happen                                                                                              
section .text:                                                                                                                                                                                                                               
                                                                                                                                                                                                                                             
_start:                     ;This is what we added at the very end, we need to specify our label _start which we will be using to run this program, this is similiar to int main in C. then we declare it global at top                      
    mov eax, 0x4                                                                                                                                                                                                                             
    mov ebx, 1                                                                                                                                                                                                                               
    mov ecx, message                                                                                                                                                                                                                         
    mov edx, message_length                                                                                                                                                                                                                  
    int 0x80                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                             
    mov eax, 0x1 ; Now this is how we exit the program, by simply using eax as our register to specify a sys call we just write mov eax, 0x1 , this calls the syscal to exit, with `,` operator giving it the params it needs from prev      
    mov ebx, 0                                                                                                                                                                                                                               
    int 0x80                                                                                                                                                                                                                                 
                         ;Have you ever wondered why C programs always return 0? We need a return value to our exit sys call, if it returns 0 that means everything executed properly and was successful                                     
                    ;int means inteerrupt not int and then 0x80 is the identifier(hex value) for running a syscall                                                                                                                           
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                             
    ;usethemessageasthe buffer uing stdout as f ;use the write syscall aka #4 in unistd32.h KEEEP IN MIND We are using Intel syntax -- that is why we are using eax (A register) to mov (move) the number of the syscall that we want to run 
                      ;now we are going to need to supply all of the other arguements that might come with that syscall in the FOLLOWING registers , e.g ebx, ecb, edx, and then (esi and edi) Maybe?                                        
                      ;Now lets go to find args and parameters for these by checking the linux programmers manual for write - takes args - file descriptor - e.g ebx(1 in our case for write) -- buffer supply aka - the message we want to  
                      ;display and then how many bytes we need to supply eg the count e.g how many bytes are in the message we are displaying                                                                                                
                      ; WHEN U RUN A SYSCALL IT FILLS IN THAT VALUE IN eax AKA IN THAT RETURN VALUE                                                                                                                                          
;now we are going to need to do system calls to actually write out and print this to the screen, we need to use sys calls to interact with kernel and the low level operating system level really easily                                     
;see my post on system calls to better understand this - System calls are awesome because this is how you to get to interact with the kernel at a very low level, lets do a quick recap of this                                              
;The kernel is the seed of the operating system if your OS is a big treee with a bunch of branches allowing you to pull leaves to use differnt functionalites                                                                                
;The kernel uses these low level system calls to perform a lot of the functions behind the scenes inside and outside of the code editor that most people are not familiar with                                                               
;The use of these kernel system calls is a hot topic in security                                                                                                                                                                             
;sys call examples can be found in a header file (like in C) ---- they are in locate unistd_32.h on linux and sudo pacman -Sy mlocate on windows                                                                                             
;The .data section is where you creaet your variables and labels to use in the program                                                                                                                                                       
;The message: db is stating we want a variable in bytes                                                                                                                                                                                      
;The 0xA is a arguement supplied with a comma that is a  hex value defining a new line character                                                                                                                                             
; If we were to open up Python and type 0x0a we would get 10, which is the ascii value of new line character whican can be confirmed typing chr(0xa) in your python interpreter of choice                                                    
; To get the length of the variable we can use strange syntax which comes from nazim, nazim will allow us to boil this down into an object file which we can link and make an executable with                                                
section .data:                                                                                                                                                                                                                               
    message: db "Hello Computer!", 0xA                                                                                                                                                                                                          
    message_length equ $-message                                                                                                                                                                                                             
                                                                                                                                                                                                                                             
    ;WE COMPILE THIS PROGRAM BY RUNNING nasm (an assembly object file creator) we run nasm -f elf32 -o hello_world.o hello_world.asm                                                                                                         
    ;Now that we have 0x80 to invoke our sys call, and we want to display out to the screen, and we have a dynamic understanding of what the lenght of our variable is..                                                                     
    ;We need to gracefully exit the program with our quit syscall (#1 in unistd32.h) located in /usr/include/x86_64-linux-gnu/asm is unistd_32 and unistd_64
